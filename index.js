const express = require("express");
const crypto = require("crypto");
const path = require("path");
const fs = require("fs");

const app = express();
const PORT = process.env.PORT || 3000;

const TOKENS_FILE = path.join(__dirname, "tokens.json");

app.use(express.json());

// üìÅ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–ø–∫–∞ ‚Äî —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
app.use(express.static(path.join(__dirname)));

// ===== –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª =====

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
function loadTokens() {
  try {
    return JSON.parse(fs.readFileSync(TOKENS_FILE, "utf8"));
  } catch (e) {
    return [];
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ñ–∞–π–ª
function saveTokens(tokens) {
  fs.writeFileSync(TOKENS_FILE, JSON.stringify(tokens, null, 2));
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á–∏–π –º–∞—Å—Å–∏–≤, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª–µ–Ω
let tokens = loadTokens();

const durationMap = {
  day: 1,
  monthly: 30,
  halfyear: 180,
  yearly: 365,
};

function generateToken() {
  return crypto.randomBytes(3).toString("hex").toUpperCase(); // –ü—Ä–∏–º–µ—Ä: 5F8A1C
}

// üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
app.get("/generate-token", (req, res) => {
  const { plan } = req.query;

  if (!durationMap[plan]) {
    return res.status(400).json({ success: false, message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω" });
  }

  const expiresAt = new Date(Date.now() + durationMap[plan] * 24 * 60 * 60 * 1000);
  const token = generateToken();

  tokens.push({ token, plan, expiresAt });
  saveTokens(tokens); // <--- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ —Ñ–∞–π–ª

  res.json({ success: true, token, plan, expiresAt });
});

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
app.get("/check-token", (req, res) => {
  // –ü–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞
  tokens = loadTokens();

  const { token } = req.query;
  const found = tokens.find((t) => t.token === token);

  if (!found) {
    return res.status(401).json({ valid: false, message: "Token not found" });
  }

  if (new Date() > new Date(found.expiresAt)) {
    return res.status(401).json({ valid: false, message: "Token expired" });
  }

  res.json({ valid: true, plan: found.plan, expiresAt: found.expiresAt });
});

// üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ (—Å —Ñ–∏–ª—å—Ç—Ä–æ–º)
app.get("/tokens", (req, res) => {
  tokens = loadTokens();
  const filter = req.query.filter || "all";
  const now = new Date();

  const filtered = tokens.filter((t) => {
    const expired = now > new Date(t.expiresAt);
    if (filter === "active") return !expired;
    if (filter === "expired") return expired;
    return true;
  });

  res.json(filtered);
});

// ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
app.delete("/tokens/:token", (req, res) => {
  tokens = loadTokens();
  const { token } = req.params;
  const index = tokens.findIndex((t) => t.token === token);

  if (index === -1) {
    return res.status(404).json({ success: false, message: "Token not found" });
  }

  tokens.splice(index, 1);
  saveTokens(tokens);

  res.json({ success: true, message: `Token ${token} —É–¥–∞–ª—ë–Ω.` });
});

// üåê –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (HTML)
app.get("/admin", (req, res) => {
  res.sendFile(path.join(__dirname, "tokens-admin.html"));
});

// üè† –ì–ª–∞–≤–Ω–∞—è
app.get("/", (req, res) => {
  res.send("üîë –°–µ—Ä–≤–µ—Ä —Ç–æ–∫–µ–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate-token, /check-token, /tokens, /tokens/:token");
});

// ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT}`);
});
